import PDFDocument from 'pdfkit';
import Course from '../models/Course.js';
import User from '../models/User.js';
import QRCode from 'qrcode';

export const generateCertificate = async (req, res) => {
  const { courseId } = req.params;

  try {
    const user = await User.findById(req.user._id).populate('enrollments.course');
    if (!user) return res.status(404).json({ success: false, message: "User not found" });

    const enrollment = user.enrollments.find(e => e.course._id.toString() === courseId);
    if (!enrollment) {
      return res.status(404).json({ success: false, message: "Not enrolled in this course" });
    }

    const completed = enrollment.completedModules.length;
    const total = enrollment.course.modules.length;

    if (completed < total) {
      return res.status(400).json({ success: false, message: "Course not yet completed" });
    }

    const qrMessage = `Congratulations, ${user.name}!\nYou completed: "${enrollment.course.title}"`;
    const qrImageDataURL = await QRCode.toDataURL(qrMessage);

    const doc = new PDFDocument({ size: 'A4', margin: 50 });

    res.setHeader('Content-Type', 'application/pdf');
    res.setHeader('Content-Disposition', 'inline; filename=certificate.pdf');
    doc.pipe(res);

    doc.fontSize(24).text("Certificate of Completion", { align: 'center' });
    doc.moveDown(2);
    doc.fontSize(16).text(`This certifies that`, { align: 'center' });
    doc.moveDown(0.5);
    doc.fontSize(20).text(`${user.name}`, { align: 'center', underline: true });
    doc.moveDown(0.5);
    doc.fontSize(16).text(`has successfully completed the course`, { align: 'center' });
    doc.moveDown(0.5);
    doc.fontSize(18).text(`"${enrollment.course.title}"`, { align: 'center', italics: true });
    doc.moveDown(2);
    doc.fontSize(12).text(`Date: ${new Date().toDateString()}`, { align: 'center' });

    doc.moveDown(3);
    doc.fontSize(12).text('__________________________', { align: 'right' });
    doc.text('Authorized Signature', { align: 'right' });

    doc.image(qrImageDataURL, 50, doc.page.height - 150, { width: 100, height: 100 });

    doc.fontSize(10).fillColor('gray')
      .text('Generated by CodeX Learning Progress Tracker', 50, doc.page.height - 30, { align: 'center' });

    doc.end();
  } catch (error) {
    console.error('Certificate generation error:', error);
    return res.status(500).json({ success: false, message: "Server error while generating certificate" });
  }
};
